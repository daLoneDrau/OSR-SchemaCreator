§entity_header
package com.osrapi.models.<schema>;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToOne;
import javax.persistence.MapKeyColumn;
import javax.persistence.MapKeyJoinColumn;
import javax.persistence.MappedSuperclass;
import javax.persistence.OneToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * @author drau
 */
@JsonInclude(JsonInclude.Include.NON_EMPTY)
@Entity
@Table(name = "<tableName>", schema = "<schema>")
public final class <entityClass> {
	/**
	 * the primary key - an autogenerated id (unique for each user in the db).
	 */
	@Id
	@Column(name = "<tableName>_id")
	@GeneratedValue(strategy = GenerationType.SEQUENCE,
  generator = "<tableName>_seq")
	@SequenceGenerator(
	    name = "<tableName>_seq",
	    sequenceName = "<schema>.<tableName>_id_seq",
	    allocationSize = 1
	)
	private Long					id;
	/** Creates a new instance of {@link <entityClass>}. */
	public <entityClass>() {
		super();
	}
	/**
	 * Gets the id.
	 * @return {@link Long}
	 */
	public Long getId() {
		return id;
	}
	/**
	 * Sets the id.
	 * @param val the new value
	 */
	public void setId(final Long val) {
		id = val;
	}
§
§entity_lookup_map_member
	@ElementCollection
	@JoinTable(name = "<tableName>_<fieldTableName>_lookup", schema = "<schema>",
	joinColumns = @JoinColumn(name = "<tableName>_id"),
	inverseJoinColumns = @JoinColumn(name = "<lookupMappingTableName>_id") )
	@MapKeyColumn(name = "key")
	@JsonProperty("<fieldTableName>")
	private Map<<keyClass>, <lookupMappingEntityClass>>	<fieldName>;
	/**
	 * Gets the map of <fieldNamePlural>.
	 * @return {@link Map}<{@link <keyClass>}, {@link <lookupMappingEntityClass>}>
	 */
	public Map<<keyClass>, <lookupMappingEntityClass>> get<fieldNameFirstCap>() {
		return <fieldName>;
	}
	/**
	 * Sets the mapping for <fieldNamePlural>.
	 * @param val the new value
	 */
	public void set<fieldNameFirstCap>(Map<<keyClass>, <lookupMappingEntityClass>> val) {
		<fieldName> = val;
	}
§
§entity_lookup_map_non_member
	@ElementCollection
	@CollectionTable(name="<tableName>_<fieldTableName>_lookup",
  schema = "<schema>", joinColumns = @JoinColumn(name = "<tableName>_id"))
	@MapKeyColumn(name="key")
	@Column(name="value")
	@JsonProperty("<fieldTableName>")
	private Map<<lookupEntityClass>, <lookupMappingClass>> <fieldName>;
	/**
	 * Gets the map of <fieldNamePlural>.
	 * @return {@link Map}<{@link <lookupEntityClass>}, {@link <lookupMappingClass>}>
	 */
	public Map<<lookupEntityClass>, <lookupMappingClass>> get<fieldNameFirstCap>() {
		return <fieldName>;
	}
	/**
	 * Sets the mapping for <fieldNamePlural>.
	 * @param val the new value
	 */
	public void set<fieldNameFirstCap>(Map<<lookupEntityClass>, <lookupMappingClass>> val) {
		<fieldName> = val;
	}
§
§entity_self_ref
	/** the <fieldName>. */
	@ManyToOne(targetEntity = <entityClass>.class, fetch = FetchType.EAGER)
	@Fetch(FetchMode.SELECT)
	@JoinColumn(name = "<fieldName>")
	@JsonProperty("<fieldTableName>")
  <notNull>
	private <entityClass>	<fieldName>;
	/**
	 * Gets the <fieldName>.
	 * @return {@link <entityClass>}
	 */
	public <entityClass> get<fieldNameFirstCap>() {
		return <fieldName>;
	}
	/**
	 * Sets the <fieldName>.
	 * @param val the new value
	 */
	public void set<fieldNameFirstCap>(final <entityClass> val) {
		<fieldName> = val;
	}
§
§entity_entity_member
	/** the <fieldName>. */
	@ManyToOne(targetEntity = <entityClass>.class, fetch = FetchType.EAGER)
	@Fetch(FetchMode.SELECT)
	@JoinColumn(name = "<fieldName>")
	@JsonProperty("<fieldTableName>")
  <notNull>
	private <entityClass>	<fieldName>;
	/**
	 * Gets the <fieldName>.
	 * @return {@link <entityClass>}
	 */
	public <entityClass> get<fieldNameFirstCap>() {
		return <fieldName>;
	}
	/**
	 * Sets the <fieldName>.
	 * @param val the new value
	 */
	public void set<fieldNameFirstCap>(final <entityClass> val) {
		<fieldName> = val;
	}
§
§entity_member
	/** the <fieldName>. */
	@Column(name = "<tableFieldName>")
	@JsonProperty("<tableFieldName>")
	<notNull>
	private <fieldClass>					<fieldName>;
	/**
	 * Gets the <fieldName>.
	 * @return {@link <fieldClass>}
	 */
	public <fieldClass> get<fieldNameFirstCap>() {
		return <fieldName>;
	}
	/**
	 * Sets the <fieldName>.
	 * @param val the new value
	 */
	public void set<fieldNameFirstCap>(final <fieldClass> val) {
		<fieldName> = val;
	}
§
§entity_many_to_one_member
	/** the <fieldName>. */
	@Cascade({CascadeType.ALL})
	@JsonProperty("<tableFieldName>")
	@ManyToOne(optional = false, fetch = FetchType.LAZY)
	<notNull>
	private <fieldClass>	<fieldName>;
	/**
	 * Gets the <fieldName>.
	 * @return {@link <fieldClass>}
	 */
	public <fieldClass> get<fieldNameFirstCap>() {
		return <fieldName>;
	}
	/**
	 * Sets the <fieldName>.
	 * @param val the new value
	 */
	public void set<fieldNameFirstCap>(final <fieldClass> val) {
		<fieldName> = val;
	}
§
§entity_primitive_map_lookup
	@ElementCollection
	@CollectionTable(name = "<entity_table>_<field_table_name>_lookup",
  schema = "<schema>", joinColumns = @JoinColumn(name = "<entity_table>_id"))
	@MapKeyColumn(name = "key")
	@Column(name = "value")
	@JsonProperty("<field_table_name>")
	private Map<<key_class>, <value_class>> <field_name>;
	/**
	 * Gets the map of <field_name_plural>.
	 * @return {@link Map}<{@link <key_class>}, {@link <value_class>}>
	 */
	public Map<<key_class>, <value_class>> get<field_name_first_cap>() {
		return <field_name>;
	}
	/**
	 * Sets the mapping for <field_name_plural>.
	 * @param val the new value
	 */
	public void set<field_name_first_cap>(Map<<key_class>, <value_class>> val) {
		<field_name> = val;
	}
§
§entity_entity_map_lookup
  /** the mapping for <field_name_plural>. */
	@ElementCollection
	@JoinTable(name = "<entity_table>_<field_table_name>_lookup",
  schema = "<schema>",
  joinColumns = @JoinColumn(name = "<entity_table>_id"),
  inverseJoinColumns = @JoinColumn(name = "<value_entity_table>_id") )
	@MapKeyColumn(name = "key")
	@JsonProperty("<field_table_name>")
	private Map<<key_class>, <value_class>>	<field_name>;
	/**
	 * Gets the map of <field_name_plural>.
	 * @return {@link Map}<{@link <key_class>}, {@link <value_class>}>
	 */
	public Map<<key_class>, <value_class>> get<field_name_first_cap>() {
		return <field_name>;
	}
	/**
	 * Sets the mapping for <field_name_plural>.
	 * @param val the new value
	 */
	public void set<field_name_first_cap>(Map<<key_class>, <value_class>> val) {
		<field_name> = val;
	}
§
§entity_lookup_member
	/**
	 * the list of {@link <lookup_entity_class>}s associated with this
	 * {@link <entity_class>}.
	 */
	@OneToMany(targetEntity = <lookup_entity_class>.class,
      fetch = FetchType.EAGER)
	@Fetch(FetchMode.SELECT)
	@JoinTable(name = "<table>_<field_table_name>_lookup", schema = "<schema>",
  joinColumns = @JoinColumn(name = "<table>_id",
  referencedColumnName = "<table>_id"),
  inverseJoinColumns = @JoinColumn(name = "<lookup_table>_id",
  referencedColumnName = "<lookup_table>_id"))
	@JsonProperty("<field_table_name>")
	private List<<lookup_entity_class>>	<field>;
	/**
	 * Gets the list of <field_name_plural>.
	 * @return {@link List}<{@link <lookup_entity_class>}>
	 */
	public List<<lookup_entity_class>> get<field_name_first_cap>() {
		return <field>;
	}
	/**
	 * Sets the list of <field_name_plural>.
	 * @param val the new value
	 */
	public void set<field_name_first_cap>(final List<<lookup_entity_class>> val) {
		<field> = val;
	}
§
§entity_lookup_primitive_member
	/**
	 * the list of <field> associated with this
	 * {@link <entity_class>}.
	 */
	@Column
	@ElementCollection(targetClass = <lookup_primitive_class>.class)
	@CollectionTable(name = "<table>_<field_table_name>_lookup", schema = "<schema>",
  joinColumns = { @JoinColumn(name = "<table>_id") })
	@JsonProperty("<field_table_name>")
	private List<<lookup_primitive_class>>	<field>;
	/**
	 * Gets the list of <field>.
	 * @return {@link List}<{@link <lookup_primitive_class>}>
	 */
	public List<<lookup_primitive_class>> get<field_name_first_cap>() {
		return <field>;
	}
	/**
	 * Sets the list of <field>.
	 * @param val the new value
	 */
	public void set<field_name_first_cap>(final List<<lookup_primitive_class>> val) {
		<field> = val;
	}
§
§entity_to_string
	/**
	 * {@inheritDoc}
	 */
	@Override
	public String toString() {
    return <fieldValue>;
  }
§
