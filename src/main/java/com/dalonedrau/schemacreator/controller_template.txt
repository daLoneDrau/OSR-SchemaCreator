§controller_header
package com.osrapi.controllers.<schema>;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.Resource;
import org.springframework.hateoas.mvc.ControllerLinkBuilder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.osrapi.models.<schema>.<entityClass>;
<embeddedEntityImports>
import com.osrapi.repositories.<schema>.<repositoryClass>;

/**
 * @author drau
 */
@CrossOrigin
@RestController
@RequestMapping(path = "/<schema>/<tableNamePlural>")
@SuppressWarnings({ "unchecked", "rawtypes" })
public class <controllerClass> {
	/** the static instance of {@link <controllerClass>}. */
	private static <controllerClass> instance;
	/**
	 * Gets the static instance.
	 * @return {@link <controllerClass>}
	 */
	public static <controllerClass> getInstance() {
		if (instance == null) {
			new <controllerClass>();
		}
		return instance;
	}
	/** the data repository. */
	@Autowired
	private <repositoryClass> repository;
	/** Creates a new instance of {@link <controllerClass>}. */
	public <controllerClass>() {
		instance = this;
	}
	/**
	 * Gets a list of {@link <entityClass>}s.
	 * @return {@link List}<{@link Resource}<{@link <entityClass>}>>
	 */
	@RequestMapping(method = RequestMethod.GET)
	public List<Resource<<entityClass>>> getAll() {
		Iterator<<entityClass>> iter = repository.findAll()
				.iterator();
		List<Resource<<entityClass>>> resources =
				new ArrayList<Resource<<entityClass>>>();
		while (iter.hasNext()) {
			resources.add(<resourceAssemblyMethod>(iter.next()));
		}
		iter = null;
		return resources;
	}
	/**
	 * Gets a single {@link <entityClass>}.
	 * @param id the event type's id
	 * @return {@link List}<{@link Resource}<{@link <entityClass>}>>
	 */
	@RequestMapping(path = "/{id}", method = RequestMethod.GET)
	public List<Resource<<entityClass>>> getById(
			@PathVariable final Long id) {
		<entityClass> entity = repository.findOne(id);
		List<Resource<<entityClass>>> resources =
				new ArrayList<Resource<<entityClass>>>();
		resources.add(<resourceAssemblyMethod>(entity));
		entity = null;
		return resources;
	}
	/**
	 * Gets a {@link Resource} instance with links for the
	 * {@link <entityClass>}.
	 * @param entity the {@link <entityClass>}
	 * @return {@link Resource}<{@link <entityClass>}>
	 */
	private Resource<<entityClass>> <resourceAssemblyMethod>(
			final <entityClass> entity) {
		Resource<<entityClass>> resource =
				new Resource<<entityClass>>(
				entity);
		// link to entity
		resource.add(ControllerLinkBuilder.linkTo(
				ControllerLinkBuilder.methodOn(getClass()).getById(
						entity.getId()))
				.withSelfRel());
		return resource;
	}
	/**
	 * Saves multiple {@link <entityClass>}s.
	 * @param entities the list of {@link <entityClass>} instances
	 * @return {@link List}<{@link Resource}<{@link <entityClass>}>>
	 */
	@RequestMapping(path = "/bulk", method = RequestMethod.POST)
	public List<Resource<<entityClass>>> save(
			@RequestBody final List<<entityClass>> entities) {
		List<Resource<<entityClass>>> resources =
				new ArrayList<Resource<<entityClass>>>();
		Iterator<<entityClass>> iter = entities.iterator();
		while (iter.hasNext()) {
			resources.add(save(iter.next()).get(0));
		}
		iter = null;
		return resources;
	}
	/**
	 * Saves a single {@link <entityClass>}.
	 * @param entity the {@link <entityClass>} instance
	 * @return {@link List}<{@link Resource}<{@link <entityClass>}>>
	 */
	@RequestMapping(method = RequestMethod.POST)
	public List<Resource<<entityClass>>> save(
			@RequestBody final <entityClass> entity) {
    <saveEmbeddedEntities>
    <saveEmbeddedMapEntities>
		<entityClass> savedEntity = repository.save(entity);
		List<Resource<<entityClass>>> list =
				getById(savedEntity.getId());
		savedEntity = null;
		return list;
	}
	/**
	 * Tries to set the Id for an entity to be saved by locating it in the
	 * repository.
	 * @param entity the {@link <entityClass>} instance
	 */
	private void setIdFromRepository(final <entityClass> entity) {
		List<<entityClass>> old = null;
		try {
			Method method = null;
			Field field = null;
			try {
				method = repository.getClass().getDeclaredMethod(
						"findByName", new Class[] { String.class });
				field = <entityClass>.class.getDeclaredField("name");
			} catch (NoSuchMethodException | NoSuchFieldException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			if (method != null
					&& field != null) {
				field.setAccessible(true);
				if (field.get(entity) != null) {
					old = (List<<entityClass>>) method.invoke(
              repository, (String) field.get(entity));
				}
			}
			if (old == null
					|| (old != null
					&& old.size() > 1)) {
				try {
					method = repository.getClass().getDeclaredMethod(
							"findByCode", new Class[] { String.class });
					field = <entityClass>.class.getDeclaredField(
							"code");
				} catch (NoSuchMethodException | NoSuchFieldException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if (method != null
						&& field != null) {
					field.setAccessible(true);
					if (field.get(entity) != null) {
						old = (List<<entityClass>>) method.invoke(
								repository, (String) field.get(entity));
					}
				}
			}
			method = null;
			field = null;
		} catch (SecurityException | IllegalArgumentException
				| IllegalAccessException
				| InvocationTargetException e) {
			e.printStackTrace();
		}
		if (old != null
				&& old.size() == 1) {
			entity.setId(old.get(0).getId());
		}
		old = null;		
	}
	/**
	 * Updates multiple {@link <entityClass>}s.
	 * @param entities the list of {@link <entityClass>} instances
	 * @return {@link List}<{@link Resource}<{@link <entityClass>}>>
	 */
	@RequestMapping(path = "/bulk", method = RequestMethod.PUT)
	public List<Resource<<entityClass>>> update(
			@RequestBody final List<<entityClass>> entities) {
		List<Resource<<entityClass>>> resources = new ArrayList<Resource<<entityClass>>>();
		Iterator<<entityClass>> iter = entities.iterator();
		while (iter.hasNext()) {
			resources.add(update(iter.next()).get(0));
		}
		iter = null;
		return resources;
	}
	/**
	 * Updates a single {@link <entityClass>}.
	 * @param entity the {@link <entityClass>} instance
	 * @return {@link List}<{@link Resource}<{@link <entityClass>}>>
	 */
	@RequestMapping(method = RequestMethod.PUT)
	public List<Resource<<entityClass>>> update(
			@RequestBody final <entityClass> entity) {		
		if (entity.getId() == null) {
			setIdFromRepository(entity);
		}
    <saveEmbeddedEntities>
    <saveEmbeddedMapEntities>
		<entityClass> savedEntity = repository.save(entity);
		List<Resource<<entityClass>>> list = getById(
				savedEntity.getId());
		savedEntity = null;
		return list;
	}
§
§controller_get_by_field
	/**
	 * Gets a list of {@link <entityClass>}s that share a <fieldName>.
	 * @param <fieldName> the <tableNamePossessive> <fieldName>
	 * @return {@link List}<{@link Resource}<{@link <entityClass>}>>
	 */
	@RequestMapping(path = "<tableFieldName>/{<fieldName>}",
			method = RequestMethod.GET)
	public List<Resource<<entityClass>>> getBy<fieldNameFirstCap>(
			@PathVariable final <fieldClass> <fieldName>) {
		Iterator<<entityClass>> iter = repository.findBy<fieldNameFirstCap>(<fieldName>)
				.iterator();
		List<Resource<<entityClass>>> resources =
				new ArrayList<Resource<<entityClass>>>();
		while (iter.hasNext()) {
			resources.add(<resourceAssemblyMethod>(iter.next()));
		}
		iter = null;
		return resources;
	}
§
§controller_save_embedded_map
  private void set<fieldNameFirstCap>IdFromRepository(final <embeddedEntityClass> value,
      final <entityClass> entity, final String key) {
		try {
			List<Resource<<embeddedEntityClass>>> list = null;
			<embeddedEntityClass> saved = null;
			Method method = null;
			Field field = null;
			try {
				method = <embeddedEntityController>.class
						.getDeclaredMethod(
								"getByName",
								new Class[] { String.class });
				field = <embeddedEntityClass>.class
						.getDeclaredField("name");
			} catch (NoSuchMethodException
					| NoSuchFieldException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			if (method != null
					&& field != null) {
				field.setAccessible(true);
				if (field.get(value) != null) {
					list = (List<Resource<<embeddedEntityClass>>>) method
							.invoke(
									<embeddedEntityController>
											.getInstance(),
									(String) field.get(value));
				}
			}
			if (list == null) {
				try {
					method = <embeddedEntityController>.class
							.getDeclaredMethod(
									"getByCode",
									new Class[] { String.class });
					field = <embeddedEntityClass>.class
							.getDeclaredField("code");
				} catch (NoSuchMethodException
						| NoSuchFieldException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if (method != null
						&& field != null) {
					field.setAccessible(true);
					if (field.get(value) != null) {
						list = (List<Resource<<embeddedEntityClass>>>) method
								.invoke(
										<embeddedEntityController>
												.getInstance(),
										(String) field.get(value));
					}
				}
			}
			if (list != null
					&& !list.isEmpty()) {
				saved = list.get(0).getContent();
			}
			if (saved == null) {
				saved = (<embeddedEntityClass>) ((Resource) <embeddedEntityController>
						.getInstance()
						.save(value).get(0)).getContent();
			}
			entity.get<fieldNameFirstCap>().put(key, saved);
			list = null;
		} catch (SecurityException | IllegalArgumentException
				| IllegalAccessException
				| InvocationTargetException e) {
			e.printStackTrace();
		}
	}
§
§controller_save_embedded_member
  private void set<fieldNameFirstCap>IdFromRepository(
      final <entityClass> entity) {
    <embeddedEntityClass> memberEntity = null;
    List<Resource<<embeddedEntityClass>>> list = null;
    try {
      Method method = null;
      Field field = null;
      try {
        method = <embeddedEntityController>.class.getDeclaredMethod(
            "getByName", new Class[] { String.class });
        field = <embeddedEntityClass>.class.getDeclaredField("name");
      } catch (NoSuchMethodException | NoSuchFieldException e) {
      }
      if (method != null
          && field != null) {
        field.setAccessible(true);
        if (field.get(entity.<getMemberField>()) != null) {
          list = (List<Resource<<embeddedEntityClass>>>) method
              .invoke(
                  <embeddedEntityController>.getInstance(),
                  (String) field
                      .get(entity.<getMemberField>()));
        }
      }
      if (list == null) {
        try {
          method = <embeddedEntityController>.class.getDeclaredMethod(
              "getByCode", new Class[] { String.class });
          field = <embeddedEntityClass>.class
              .getDeclaredField("code");
        } catch (NoSuchMethodException | NoSuchFieldException e) {
        }
        if (method != null
            && field != null) {
          field.setAccessible(true);
          if (field.get(entity.<getMemberField>()) != null) {
            list = (List<Resource<<embeddedEntityClass>>>)
                method.invoke(<embeddedEntityController>
                    .getInstance(),(String) field.get(
                        entity.<getMemberField>()));
          }
        }
      }
      method = null;
      field = null;
    } catch (SecurityException | IllegalArgumentException
        | IllegalAccessException
        | InvocationTargetException e) {
    }
    if (list != null
        && !list.isEmpty()) {
      memberEntity = list.get(0).getContent();
    }
    if (memberEntity == null) {
      memberEntity = (<embeddedEntityClass>)
          ((Resource) <embeddedEntityController>.getInstance().save(
              entity.<getMemberField>()).get(0)).getContent();
    }
    entity.<setMemberField>(memberEntity);
    list = null;
	}
§
§controller_save_embedded_map_condition
		if (entity.<getEmbeddedMap>() != null
        && !entity.<getEmbeddedMap>().isEmpty()) {
			// get Id of each
			Iterator<String> iter = entity.<getEmbeddedMap>().keySet().iterator();
			while (iter.hasNext()) {
				String key = iter.next();
				<embeddedEntityClass> value = entity.<getEmbeddedMap>().get(key);
				if (value.getId() == null) {
					set<fieldNameFirstCap>IdFromRepository(value, entity, key);
				}
			}
    }
§
§controller_save_embedded
		if (entity.<getEmbeddedEntity>() != null
        && entity.<getEmbeddedEntity>().getId() == null) {
      set<fieldNameFirstCap>IdFromRepository(entity);
		}
§
§controller_save_embedded_lookup
    if (entity.<getEmbeddedLookup>() != null
				&& !entity.<getEmbeddedLookup>().isEmpty()) {
			for (int i = entity.<getEmbeddedLookup>().size() - 1; i >= 0; i--) {
				<embeddedLookupClass> <embeddedLookupInstance> = null;
				List<Resource<<embeddedLookupClass>>> list = null;
				try {
					Method method = null;
          try {
            method = <embeddedLookupController>.class.getDeclaredMethod(
                "getByName", new Class[] { String.class });
          } catch (NoSuchMethodException e) {
						e.printStackTrace();
					}
					Field field = null;
          try {
            field = <embeddedLookupClass>.class
                .getDeclaredField("name");
          } catch (NoSuchFieldException e) {
						e.printStackTrace();
					}
					if (method != null
							&& field != null) {
						field.setAccessible(true);
						if (field.get(entity.<getEmbeddedLookup>().get(i)) != null) {
							list = (List<Resource<<embeddedLookupClass>>>) method
									.invoke(
											<embeddedLookupController>.getInstance(),
											(String) field.get(entity.<getEmbeddedLookup>().get(i)));
						}
					}
					if (list == null) {
            try {
              method = <embeddedLookupController>.class.getDeclaredMethod(
                  "getByCode", new Class[] { String.class });
            } catch (NoSuchMethodException e) {
              e.printStackTrace();
            }
            try {
              field = <embeddedLookupClass>.class.getDeclaredField(
                  "code");
            } catch (NoSuchFieldException e) {
              e.printStackTrace();
            }
						if (method != null
								&& field != null) {
							field.setAccessible(true);
							if (field.get(entity.<getEmbeddedLookup>().get(i)) != null) {
								list = (List<Resource<<embeddedLookupClass>>>) method
										.invoke(
												<embeddedLookupController>
														.getInstance(),
												(String) field
														.get(entity.<getEmbeddedLookup>().get(i)));
							}
						}
					}
					method = null;
					field = null;
				} catch (SecurityException | IllegalArgumentException
						| IllegalAccessException
						| InvocationTargetException e) {
					e.printStackTrace();
				}
				if (list != null
						&& !list.isEmpty()) {
					<embeddedLookupInstance> = list.get(0).getContent();
				}
				if (<embeddedLookupInstance> == null) {
					<embeddedLookupInstance> = (<embeddedLookupClass>) ((Resource) <embeddedLookupController>
							.getInstance()
							.save(entity.<getEmbeddedLookup>().get(i)).get(0)).getContent();
				}
				entity.<getEmbeddedLookup>().set(i, <embeddedLookupInstance>);
				list = null;
			}
		}
§
