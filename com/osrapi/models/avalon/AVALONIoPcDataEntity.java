package com.osrapi.models.avalon;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToOne;
import javax.persistence.MapKeyColumn;
import javax.persistence.MapKeyJoinColumn;
import javax.persistence.MappedSuperclass;
import javax.persistence.OneToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * @author drau
 */
@JsonInclude(JsonInclude.Include.NON_EMPTY)
@Entity
@Table(name = "io_pc_data", schema = "avalon")
public final class AVALONIoPcDataEntity {
    /**
     * the primary key - an autogenerated id (unique for each user in the db).
     */
    @Id
    @Column(name = "io_pc_data_id")
    @GeneratedValue(strategy = GenerationType.SEQUENCE,
  generator = "io_pc_data_seq")
    @SequenceGenerator(
        name = "io_pc_data_seq",
        sequenceName = "avalon.io_pc_data_id_seq",
        allocationSize = 1
    )
    private Long                    id;
    /** Creates a new instance of {@link AVALONIoPcDataEntity}. */
    public AVALONIoPcDataEntity() {
        super();
    }
    /**
     * Gets the id.
     * @return {@link Long}
     */
    public Long getId() {
        return id;
    }
    /**
     * Sets the id.
     * @param val the new value
     */
    public void setId(final Long val) {
        id = val;
    }

    /** the vulnerability. */
    @ManyToOne(targetEntity = AVALONVulnerabilityEntity.class, fetch = FetchType.EAGER)
    @Fetch(FetchMode.SELECT)
    @JoinColumn(name = "vulnerability")
    @JsonProperty("vulnerability")
  
    private AVALONVulnerabilityEntity    vulnerability;
    /**
     * Gets the vulnerability.
     * @return {@link AVALONVulnerabilityEntity}
     */
    public AVALONVulnerabilityEntity getVulnerability() {
        return vulnerability;
    }
    /**
     * Sets the vulnerability.
     * @param val the new value
     */
    public void setVulnerability(final AVALONVulnerabilityEntity val) {
        vulnerability = val;
    }

    /** the stageFourSpells. */
    @Column(name = "stage_four_spells")
    @JsonProperty("stage_four_spells")
    
    private Long                    stageFourSpells;
    /**
     * Gets the stageFourSpells.
     * @return {@link Long}
     */
    public Long getStageFourSpells() {
        return stageFourSpells;
    }
    /**
     * Sets the stageFourSpells.
     * @param val the new value
     */
    public void setStageFourSpells(final Long val) {
        stageFourSpells = val;
    }

    /** the stageThreeSpells. */
    @Column(name = "stage_three_spells")
    @JsonProperty("stage_three_spells")
    
    private Long                    stageThreeSpells;
    /**
     * Gets the stageThreeSpells.
     * @return {@link Long}
     */
    public Long getStageThreeSpells() {
        return stageThreeSpells;
    }
    /**
     * Sets the stageThreeSpells.
     * @param val the new value
     */
    public void setStageThreeSpells(final Long val) {
        stageThreeSpells = val;
    }

    /** the stageThreeName. */
    @Column(name = "stage_three_name")
    @JsonProperty("stage_three_name")
    @NotNull
    private String                    stageThreeName;
    /**
     * Gets the stageThreeName.
     * @return {@link String}
     */
    public String getStageThreeName() {
        return stageThreeName;
    }
    /**
     * Sets the stageThreeName.
     * @param val the new value
     */
    public void setStageThreeName(final String val) {
        stageThreeName = val;
    }

    /** the stageTwoSpells. */
    @Column(name = "stage_two_spells")
    @JsonProperty("stage_two_spells")
    
    private Long                    stageTwoSpells;
    /**
     * Gets the stageTwoSpells.
     * @return {@link Long}
     */
    public Long getStageTwoSpells() {
        return stageTwoSpells;
    }
    /**
     * Sets the stageTwoSpells.
     * @param val the new value
     */
    public void setStageTwoSpells(final Long val) {
        stageTwoSpells = val;
    }

    /** the stageTwoName. */
    @Column(name = "stage_two_name")
    @JsonProperty("stage_two_name")
    @NotNull
    private String                    stageTwoName;
    /**
     * Gets the stageTwoName.
     * @return {@link String}
     */
    public String getStageTwoName() {
        return stageTwoName;
    }
    /**
     * Sets the stageTwoName.
     * @param val the new value
     */
    public void setStageTwoName(final String val) {
        stageTwoName = val;
    }

    /** the stageOneSpells. */
    @Column(name = "stage_one_spells")
    @JsonProperty("stage_one_spells")
    
    private Long                    stageOneSpells;
    /**
     * Gets the stageOneSpells.
     * @return {@link Long}
     */
    public Long getStageOneSpells() {
        return stageOneSpells;
    }
    /**
     * Sets the stageOneSpells.
     * @param val the new value
     */
    public void setStageOneSpells(final Long val) {
        stageOneSpells = val;
    }

    /** the stageOneName. */
    @Column(name = "stage_one_name")
    @JsonProperty("stage_one_name")
    @NotNull
    private String                    stageOneName;
    /**
     * Gets the stageOneName.
     * @return {@link String}
     */
    public String getStageOneName() {
        return stageOneName;
    }
    /**
     * Sets the stageOneName.
     * @param val the new value
     */
    public void setStageOneName(final String val) {
        stageOneName = val;
    }

    /** the name. */
    @Column(name = "name")
    @JsonProperty("name")
    @NotNull
    private String                    name;
    /**
     * Gets the name.
     * @return {@link String}
     */
    public String getName() {
        return name;
    }
    /**
     * Sets the name.
     * @param val the new value
     */
    public void setName(final String val) {
        name = val;
    }

    /** the interfaceFlags. */
    @Column(name = "interface_flags")
    @JsonProperty("interface_flags")
    
    private Long                    interfaceFlags;
    /**
     * Gets the interfaceFlags.
     * @return {@link Long}
     */
    public Long getInterfaceFlags() {
        return interfaceFlags;
    }
    /**
     * Sets the interfaceFlags.
     * @param val the new value
     */
    public void setInterfaceFlags(final Long val) {
        interfaceFlags = val;
    }

    /** the gold. */
    @Column(name = "gold")
    @JsonProperty("gold")
    
    private Float                    gold;
    /**
     * Gets the gold.
     * @return {@link Float}
     */
    public Float getGold() {
        return gold;
    }
    /**
     * Sets the gold.
     * @param val the new value
     */
    public void setGold(final Float val) {
        gold = val;
    }

    /** the glyph. */
    @Column(name = "glyph")
    @JsonProperty("glyph")
    @NotNull
    private String                    glyph;
    /**
     * Gets the glyph.
     * @return {@link String}
     */
    public String getGlyph() {
        return glyph;
    }
    /**
     * Sets the glyph.
     * @param val the new value
     */
    public void setGlyph(final String val) {
        glyph = val;
    }

    /** the gender. */
    @ManyToOne(targetEntity = AVALONGenderEntity.class, fetch = FetchType.EAGER)
    @Fetch(FetchMode.SELECT)
    @JoinColumn(name = "gender")
    @JsonProperty("gender")
  @NotNull
    private AVALONGenderEntity    gender;
    /**
     * Gets the gender.
     * @return {@link AVALONGenderEntity}
     */
    public AVALONGenderEntity getGender() {
        return gender;
    }
    /**
     * Sets the gender.
     * @param val the new value
     */
    public void setGender(final AVALONGenderEntity val) {
        gender = val;
    }

    /** the evaluation. */
    @Column(name = "evaluation")
    @JsonProperty("evaluation")
    @NotNull
    private String                    evaluation;
    /**
     * Gets the evaluation.
     * @return {@link String}
     */
    public String getEvaluation() {
        return evaluation;
    }
    /**
     * Sets the evaluation.
     * @param val the new value
     */
    public void setEvaluation(final String val) {
        evaluation = val;
    }

    /** the advantage2. */
    @ManyToOne(targetEntity = AVALONAdvantageEntity.class, fetch = FetchType.EAGER)
    @Fetch(FetchMode.SELECT)
    @JoinColumn(name = "advantage2")
    @JsonProperty("advantage_two")
  @NotNull
    private AVALONAdvantageEntity    advantage2;
    /**
     * Gets the advantage2.
     * @return {@link AVALONAdvantageEntity}
     */
    public AVALONAdvantageEntity getAdvantage2() {
        return advantage2;
    }
    /**
     * Sets the advantage2.
     * @param val the new value
     */
    public void setAdvantage2(final AVALONAdvantageEntity val) {
        advantage2 = val;
    }

    /** the advantage1. */
    @ManyToOne(targetEntity = AVALONAdvantageEntity.class, fetch = FetchType.EAGER)
    @Fetch(FetchMode.SELECT)
    @JoinColumn(name = "advantage1")
    @JsonProperty("advantage_one")
  @NotNull
    private AVALONAdvantageEntity    advantage1;
    /**
     * Gets the advantage1.
     * @return {@link AVALONAdvantageEntity}
     */
    public AVALONAdvantageEntity getAdvantage1() {
        return advantage1;
    }
    /**
     * Sets the advantage1.
     * @param val the new value
     */
    public void setAdvantage1(final AVALONAdvantageEntity val) {
        advantage1 = val;
    }

    /**
     * the list of {@link AVALONGroupEntity}s associated with this
     * {@link AVALONIoPcDataEntity}.
     */
    @OneToMany(targetEntity = AVALONGroupEntity.class,
      fetch = FetchType.EAGER)
    @Fetch(FetchMode.SELECT)
    @JoinTable(name = "io_pc_data_unfriendly_lookup", schema = "avalon",
  joinColumns = @JoinColumn(name = "io_pc_data_id",
  referencedColumnName = "io_pc_data_id"),
  inverseJoinColumns = @JoinColumn(name = "group_id",
  referencedColumnName = "group_id"))
    @JsonProperty("unfriendly")
    private List<AVALONGroupEntity>    unfriendly;
    /**
     * Gets the list of unfriendlies.
     * @return {@link List}<{@link AVALONGroupEntity}>
     */
    public List<AVALONGroupEntity> getUnfriendly() {
        return unfriendly;
    }
    /**
     * Sets the list of unfriendlies.
     * @param val the new value
     */
    public void setUnfriendly(final List<AVALONGroupEntity> val) {
        unfriendly = val;
    }

    /**
     * the list of startingLocation associated with this
     * {@link AVALONIoPcDataEntity}.
     */
    @Column
    @ElementCollection(targetClass = String.class)
    @CollectionTable(name = "io_pc_data_starting_location_lookup", schema = "avalon",
  joinColumns = { @JoinColumn(name = "io_pc_data_id") })
    @JsonProperty("starting_location")
    private List<String>    startingLocation;
    /**
     * Gets the list of startingLocation.
     * @return {@link List}<{@link String}>
     */
    public List<String> getStartingLocation() {
        return startingLocation;
    }
    /**
     * Sets the list of startingLocation.
     * @param val the new value
     */
    public void setStartingLocation(final List<String> val) {
        startingLocation = val;
    }

    /**
     * the list of {@link AVALONDevelopmentActionsEntity}s associated with this
     * {@link AVALONIoPcDataEntity}.
     */
    @OneToMany(targetEntity = AVALONDevelopmentActionsEntity.class,
      fetch = FetchType.EAGER)
    @Fetch(FetchMode.SELECT)
    @JoinTable(name = "io_pc_data_stage_four_actions_lookup", schema = "avalon",
  joinColumns = @JoinColumn(name = "io_pc_data_id",
  referencedColumnName = "io_pc_data_id"),
  inverseJoinColumns = @JoinColumn(name = "development_actions_id",
  referencedColumnName = "development_actions_id"))
    @JsonProperty("stage_four_actions")
    private List<AVALONDevelopmentActionsEntity>    stageFourActions;
    /**
     * Gets the list of stageFourActionss.
     * @return {@link List}<{@link AVALONDevelopmentActionsEntity}>
     */
    public List<AVALONDevelopmentActionsEntity> getStageFourActions() {
        return stageFourActions;
    }
    /**
     * Sets the list of stageFourActionss.
     * @param val the new value
     */
    public void setStageFourActions(final List<AVALONDevelopmentActionsEntity> val) {
        stageFourActions = val;
    }

    /**
     * the list of {@link AVALONDevelopmentActionsEntity}s associated with this
     * {@link AVALONIoPcDataEntity}.
     */
    @OneToMany(targetEntity = AVALONDevelopmentActionsEntity.class,
      fetch = FetchType.EAGER)
    @Fetch(FetchMode.SELECT)
    @JoinTable(name = "io_pc_data_stage_three_actions_lookup", schema = "avalon",
  joinColumns = @JoinColumn(name = "io_pc_data_id",
  referencedColumnName = "io_pc_data_id"),
  inverseJoinColumns = @JoinColumn(name = "development_actions_id",
  referencedColumnName = "development_actions_id"))
    @JsonProperty("stage_three_actions")
    private List<AVALONDevelopmentActionsEntity>    stageThreeActions;
    /**
     * Gets the list of stageThreeActionss.
     * @return {@link List}<{@link AVALONDevelopmentActionsEntity}>
     */
    public List<AVALONDevelopmentActionsEntity> getStageThreeActions() {
        return stageThreeActions;
    }
    /**
     * Sets the list of stageThreeActionss.
     * @param val the new value
     */
    public void setStageThreeActions(final List<AVALONDevelopmentActionsEntity> val) {
        stageThreeActions = val;
    }

    /**
     * the list of {@link AVALONDevelopmentActionsEntity}s associated with this
     * {@link AVALONIoPcDataEntity}.
     */
    @OneToMany(targetEntity = AVALONDevelopmentActionsEntity.class,
      fetch = FetchType.EAGER)
    @Fetch(FetchMode.SELECT)
    @JoinTable(name = "io_pc_data_stage_two_actions_lookup", schema = "avalon",
  joinColumns = @JoinColumn(name = "io_pc_data_id",
  referencedColumnName = "io_pc_data_id"),
  inverseJoinColumns = @JoinColumn(name = "development_actions_id",
  referencedColumnName = "development_actions_id"))
    @JsonProperty("stage_two_actions")
    private List<AVALONDevelopmentActionsEntity>    stageTwoActions;
    /**
     * Gets the list of stageTwoActionss.
     * @return {@link List}<{@link AVALONDevelopmentActionsEntity}>
     */
    public List<AVALONDevelopmentActionsEntity> getStageTwoActions() {
        return stageTwoActions;
    }
    /**
     * Sets the list of stageTwoActionss.
     * @param val the new value
     */
    public void setStageTwoActions(final List<AVALONDevelopmentActionsEntity> val) {
        stageTwoActions = val;
    }

    /**
     * the list of {@link AVALONDevelopmentActionsEntity}s associated with this
     * {@link AVALONIoPcDataEntity}.
     */
    @OneToMany(targetEntity = AVALONDevelopmentActionsEntity.class,
      fetch = FetchType.EAGER)
    @Fetch(FetchMode.SELECT)
    @JoinTable(name = "io_pc_data_stage_one_actions_lookup", schema = "avalon",
  joinColumns = @JoinColumn(name = "io_pc_data_id",
  referencedColumnName = "io_pc_data_id"),
  inverseJoinColumns = @JoinColumn(name = "development_actions_id",
  referencedColumnName = "development_actions_id"))
    @JsonProperty("stage_one_actions")
    private List<AVALONDevelopmentActionsEntity>    stageOneActions;
    /**
     * Gets the list of stageOneActionss.
     * @return {@link List}<{@link AVALONDevelopmentActionsEntity}>
     */
    public List<AVALONDevelopmentActionsEntity> getStageOneActions() {
        return stageOneActions;
    }
    /**
     * Sets the list of stageOneActionss.
     * @param val the new value
     */
    public void setStageOneActions(final List<AVALONDevelopmentActionsEntity> val) {
        stageOneActions = val;
    }

    /**
     * the list of {@link AVALONGroupEntity}s associated with this
     * {@link AVALONIoPcDataEntity}.
     */
    @OneToMany(targetEntity = AVALONGroupEntity.class,
      fetch = FetchType.EAGER)
    @Fetch(FetchMode.SELECT)
    @JoinTable(name = "io_pc_data_friendly_lookup", schema = "avalon",
  joinColumns = @JoinColumn(name = "io_pc_data_id",
  referencedColumnName = "io_pc_data_id"),
  inverseJoinColumns = @JoinColumn(name = "group_id",
  referencedColumnName = "group_id"))
    @JsonProperty("friendly")
    private List<AVALONGroupEntity>    friendly;
    /**
     * Gets the list of friendlies.
     * @return {@link List}<{@link AVALONGroupEntity}>
     */
    public List<AVALONGroupEntity> getFriendly() {
        return friendly;
    }
    /**
     * Sets the list of friendlies.
     * @param val the new value
     */
    public void setFriendly(final List<AVALONGroupEntity> val) {
        friendly = val;
    }

    /**
     * the list of {@link AVALONGroupEntity}s associated with this
     * {@link AVALONIoPcDataEntity}.
     */
    @OneToMany(targetEntity = AVALONGroupEntity.class,
      fetch = FetchType.EAGER)
    @Fetch(FetchMode.SELECT)
    @JoinTable(name = "io_pc_data_enemy_lookup", schema = "avalon",
  joinColumns = @JoinColumn(name = "io_pc_data_id",
  referencedColumnName = "io_pc_data_id"),
  inverseJoinColumns = @JoinColumn(name = "group_id",
  referencedColumnName = "group_id"))
    @JsonProperty("enemy")
    private List<AVALONGroupEntity>    enemy;
    /**
     * Gets the list of enemies.
     * @return {@link List}<{@link AVALONGroupEntity}>
     */
    public List<AVALONGroupEntity> getEnemy() {
        return enemy;
    }
    /**
     * Sets the list of enemies.
     * @param val the new value
     */
    public void setEnemy(final List<AVALONGroupEntity> val) {
        enemy = val;
    }

    /**
     * the list of {@link AVALONGroupEntity}s associated with this
     * {@link AVALONIoPcDataEntity}.
     */
    @OneToMany(targetEntity = AVALONGroupEntity.class,
      fetch = FetchType.EAGER)
    @Fetch(FetchMode.SELECT)
    @JoinTable(name = "io_pc_data_ally_lookup", schema = "avalon",
  joinColumns = @JoinColumn(name = "io_pc_data_id",
  referencedColumnName = "io_pc_data_id"),
  inverseJoinColumns = @JoinColumn(name = "group_id",
  referencedColumnName = "group_id"))
    @JsonProperty("ally")
    private List<AVALONGroupEntity>    ally;
    /**
     * Gets the list of allies.
     * @return {@link List}<{@link AVALONGroupEntity}>
     */
    public List<AVALONGroupEntity> getAlly() {
        return ally;
    }
    /**
     * Sets the list of allies.
     * @param val the new value
     */
    public void setAlly(final List<AVALONGroupEntity> val) {
        ally = val;
    }

    @ElementCollection
    @CollectionTable(name = "io_pc_data_stage_four_equipped_items_lookup",
  schema = "avalon", joinColumns = @JoinColumn(name = "io_pc_data_id"))
    @MapKeyColumn(name = "key")
    @Column(name = "value")
    @JsonProperty("stage_four_equipped_items")
    private Map<String, String> stageFourEquippedItems;
    /**
     * Gets the map of stageFourEquippedItemss.
     * @return {@link Map}<{@link String}, {@link String}>
     */
    public Map<String, String> getStageFourEquippedItems() {
        return stageFourEquippedItems;
    }
    /**
     * Sets the mapping for stageFourEquippedItemss.
     * @param val the new value
     */
    public void setStageFourEquippedItems(Map<String, String> val) {
        stageFourEquippedItems = val;
    }

    @ElementCollection
    @CollectionTable(name = "io_pc_data_stage_three_equipped_items_lookup",
  schema = "avalon", joinColumns = @JoinColumn(name = "io_pc_data_id"))
    @MapKeyColumn(name = "key")
    @Column(name = "value")
    @JsonProperty("stage_three_equipped_items")
    private Map<String, String> stageThreeEquippedItems;
    /**
     * Gets the map of stageThreeEquippedItemss.
     * @return {@link Map}<{@link String}, {@link String}>
     */
    public Map<String, String> getStageThreeEquippedItems() {
        return stageThreeEquippedItems;
    }
    /**
     * Sets the mapping for stageThreeEquippedItemss.
     * @param val the new value
     */
    public void setStageThreeEquippedItems(Map<String, String> val) {
        stageThreeEquippedItems = val;
    }

    @ElementCollection
    @CollectionTable(name = "io_pc_data_stage_two_equipped_items_lookup",
  schema = "avalon", joinColumns = @JoinColumn(name = "io_pc_data_id"))
    @MapKeyColumn(name = "key")
    @Column(name = "value")
    @JsonProperty("stage_two_equipped_items")
    private Map<String, String> stageTwoEquippedItems;
    /**
     * Gets the map of stageTwoEquippedItemss.
     * @return {@link Map}<{@link String}, {@link String}>
     */
    public Map<String, String> getStageTwoEquippedItems() {
        return stageTwoEquippedItems;
    }
    /**
     * Sets the mapping for stageTwoEquippedItemss.
     * @param val the new value
     */
    public void setStageTwoEquippedItems(Map<String, String> val) {
        stageTwoEquippedItems = val;
    }

    @ElementCollection
    @CollectionTable(name = "io_pc_data_stage_one_equipped_items_lookup",
  schema = "avalon", joinColumns = @JoinColumn(name = "io_pc_data_id"))
    @MapKeyColumn(name = "key")
    @Column(name = "value")
    @JsonProperty("stage_one_equipped_items")
    private Map<String, String> stageOneEquippedItems;
    /**
     * Gets the map of stageOneEquippedItemss.
     * @return {@link Map}<{@link String}, {@link String}>
     */
    public Map<String, String> getStageOneEquippedItems() {
        return stageOneEquippedItems;
    }
    /**
     * Sets the mapping for stageOneEquippedItemss.
     * @param val the new value
     */
    public void setStageOneEquippedItems(Map<String, String> val) {
        stageOneEquippedItems = val;
    }

}

