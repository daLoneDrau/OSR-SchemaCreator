package com.osrapi.models.avalon;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToOne;
import javax.persistence.MapKeyColumn;
import javax.persistence.MapKeyJoinColumn;
import javax.persistence.MappedSuperclass;
import javax.persistence.OneToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * @author drau
 */
@JsonInclude(JsonInclude.Include.NON_EMPTY)
@Entity
@Table(name = "hexagon", schema = "avalon")
public final class AVALONHexagonEntity {
    /**
     * the primary key - an autogenerated id (unique for each user in the db).
     */
    @Id
    @Column(name = "hexagon_id")
    @GeneratedValue(strategy = GenerationType.SEQUENCE,
  generator = "hexagon_seq")
    @SequenceGenerator(
        name = "hexagon_seq",
        sequenceName = "avalon.hexagon_id_seq",
        allocationSize = 1
    )
    private Long                    id;
    /** Creates a new instance of {@link AVALONHexagonEntity}. */
    public AVALONHexagonEntity() {
        super();
    }
    /**
     * Gets the id.
     * @return {@link Long}
     */
    public Long getId() {
        return id;
    }
    /**
     * Sets the id.
     * @param val the new value
     */
    public void setId(final Long val) {
        id = val;
    }

    /** the z. */
    @Column(name = "z")
    @JsonProperty("z")
    @NotNull
    private long                    z;
    /**
     * Gets the z.
     * @return {@link long}
     */
    public long getZ() {
        return z;
    }
    /**
     * Sets the z.
     * @param val the new value
     */
    public void setZ(final long val) {
        z = val;
    }

    /** the y. */
    @Column(name = "y")
    @JsonProperty("y")
    @NotNull
    private long                    y;
    /**
     * Gets the y.
     * @return {@link long}
     */
    public long getY() {
        return y;
    }
    /**
     * Sets the y.
     * @param val the new value
     */
    public void setY(final long val) {
        y = val;
    }

    /** the x. */
    @Column(name = "x")
    @JsonProperty("x")
    @NotNull
    private long                    x;
    /**
     * Gets the x.
     * @return {@link long}
     */
    public long getX() {
        return x;
    }
    /**
     * Sets the x.
     * @param val the new value
     */
    public void setX(final long val) {
        x = val;
    }

    /** the width. */
    @Column(name = "width")
    @JsonProperty("width")
    @NotNull
    private float                    width;
    /**
     * Gets the width.
     * @return {@link float}
     */
    public float getWidth() {
        return width;
    }
    /**
     * Sets the width.
     * @param val the new value
     */
    public void setWidth(final float val) {
        width = val;
    }

    /** the verticalDistance. */
    @Column(name = "vertical_distance")
    @JsonProperty("vertical_distance")
    @NotNull
    private float                    verticalDistance;
    /**
     * Gets the verticalDistance.
     * @return {@link float}
     */
    public float getVerticalDistance() {
        return verticalDistance;
    }
    /**
     * Sets the verticalDistance.
     * @param val the new value
     */
    public void setVerticalDistance(final float val) {
        verticalDistance = val;
    }

    /** the size. */
    @Column(name = "size")
    @JsonProperty("size")
    @NotNull
    private float                    size;
    /**
     * Gets the size.
     * @return {@link float}
     */
    public float getSize() {
        return size;
    }
    /**
     * Sets the size.
     * @param val the new value
     */
    public void setSize(final float val) {
        size = val;
    }

    /** the horizontalDistance. */
    @Column(name = "horizontal_distance")
    @JsonProperty("horizontal_distance")
    @NotNull
    private float                    horizontalDistance;
    /**
     * Gets the horizontalDistance.
     * @return {@link float}
     */
    public float getHorizontalDistance() {
        return horizontalDistance;
    }
    /**
     * Sets the horizontalDistance.
     * @param val the new value
     */
    public void setHorizontalDistance(final float val) {
        horizontalDistance = val;
    }

    /** the height. */
    @Column(name = "height")
    @JsonProperty("height")
    @NotNull
    private float                    height;
    /**
     * Gets the height.
     * @return {@link float}
     */
    public float getHeight() {
        return height;
    }
    /**
     * Sets the height.
     * @param val the new value
     */
    public void setHeight(final float val) {
        height = val;
    }

    /** the flat. */
    @Column(name = "flat")
    @JsonProperty("flat")
    @NotNull
    private Boolean                    flat;
    /**
     * Gets the flat.
     * @return {@link Boolean}
     */
    public Boolean getFlat() {
        return flat;
    }
    /**
     * Sets the flat.
     * @param val the new value
     */
    public void setFlat(final Boolean val) {
        flat = val;
    }

}

