package com.osrapi.models.avalon;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToOne;
import javax.persistence.MapKeyColumn;
import javax.persistence.MapKeyJoinColumn;
import javax.persistence.MappedSuperclass;
import javax.persistence.OneToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * @author drau
 */
@JsonInclude(JsonInclude.Include.NON_EMPTY)
@Entity
@Table(name = "hex_tile", schema = "avalon")
public final class AVALONHexTileEntity {
    /**
     * the primary key - an autogenerated id (unique for each user in the db).
     */
    @Id
    @Column(name = "hex_tile_id")
    @GeneratedValue(strategy = GenerationType.SEQUENCE,
  generator = "hex_tile_seq")
    @SequenceGenerator(
        name = "hex_tile_seq",
        sequenceName = "avalon.hex_tile_id_seq",
        allocationSize = 1
    )
    private Long                    id;
    /** Creates a new instance of {@link AVALONHexTileEntity}. */
    public AVALONHexTileEntity() {
        super();
    }
    /**
     * Gets the id.
     * @return {@link Long}
     */
    public Long getId() {
        return id;
    }
    /**
     * Sets the id.
     * @param val the new value
     */
    public void setId(final Long val) {
        id = val;
    }

    /** the type. */
    @ManyToOne(targetEntity = AVALONHexTileTypeEntity.class, fetch = FetchType.EAGER)
    @Fetch(FetchMode.SELECT)
    @JoinColumn(name = "type")
    @JsonProperty("type")
  @NotNull
    private AVALONHexTileTypeEntity    type;
    /**
     * Gets the type.
     * @return {@link AVALONHexTileTypeEntity}
     */
    public AVALONHexTileTypeEntity getType() {
        return type;
    }
    /**
     * Sets the type.
     * @param val the new value
     */
    public void setType(final AVALONHexTileTypeEntity val) {
        type = val;
    }

    /** the name. */
    @Column(name = "name")
    @JsonProperty("name")
    @NotNull
    private String                    name;
    /**
     * Gets the name.
     * @return {@link String}
     */
    public String getName() {
        return name;
    }
    /**
     * Sets the name.
     * @param val the new value
     */
    public void setName(final String val) {
        name = val;
    }

    /** the abbreviation. */
    @Column(name = "abbreviation")
    @JsonProperty("abbreviation")
    @NotNull
    private String                    abbreviation;
    /**
     * Gets the abbreviation.
     * @return {@link String}
     */
    public String getAbbreviation() {
        return abbreviation;
    }
    /**
     * Sets the abbreviation.
     * @param val the new value
     */
    public void setAbbreviation(final String val) {
        abbreviation = val;
    }

    /**
     * the list of {@link AVALONHexNodeEntity}s associated with this
     * {@link AVALONHexTileEntity}.
     */
    @OneToMany(targetEntity = AVALONHexNodeEntity.class,
      fetch = FetchType.EAGER)
    @Fetch(FetchMode.SELECT)
    @JoinTable(name = "hex_tile_terrain_lookup", schema = "avalon",
  joinColumns = @JoinColumn(name = "hex_tile_id",
  referencedColumnName = "hex_tile_id"),
  inverseJoinColumns = @JoinColumn(name = "hex_node_id",
  referencedColumnName = "hex_node_id"))
    @JsonProperty("terrain")
    private List<AVALONHexNodeEntity>    terrain;
    /**
     * Gets the list of terrains.
     * @return {@link List}<{@link AVALONHexNodeEntity}>
     */
    public List<AVALONHexNodeEntity> getTerrain() {
        return terrain;
    }
    /**
     * Sets the list of terrains.
     * @param val the new value
     */
    public void setTerrain(final List<AVALONHexNodeEntity> val) {
        terrain = val;
    }

    /**
     * the list of {@link AVALONHexSideEdgeEntity}s associated with this
     * {@link AVALONHexTileEntity}.
     */
    @OneToMany(targetEntity = AVALONHexSideEdgeEntity.class,
      fetch = FetchType.EAGER)
    @Fetch(FetchMode.SELECT)
    @JoinTable(name = "hex_tile_side_edges_lookup", schema = "avalon",
  joinColumns = @JoinColumn(name = "hex_tile_id",
  referencedColumnName = "hex_tile_id"),
  inverseJoinColumns = @JoinColumn(name = "hex_side_edge_id",
  referencedColumnName = "hex_side_edge_id"))
    @JsonProperty("side_edges")
    private List<AVALONHexSideEdgeEntity>    sideEdges;
    /**
     * Gets the list of sideEdges.
     * @return {@link List}<{@link AVALONHexSideEdgeEntity}>
     */
    public List<AVALONHexSideEdgeEntity> getSideEdges() {
        return sideEdges;
    }
    /**
     * Sets the list of sideEdges.
     * @param val the new value
     */
    public void setSideEdges(final List<AVALONHexSideEdgeEntity> val) {
        sideEdges = val;
    }

    /**
     * the list of {@link AVALONHexNodeEdgeEntity}s associated with this
     * {@link AVALONHexTileEntity}.
     */
    @OneToMany(targetEntity = AVALONHexNodeEdgeEntity.class,
      fetch = FetchType.EAGER)
    @Fetch(FetchMode.SELECT)
    @JoinTable(name = "hex_tile_secret_edges_lookup", schema = "avalon",
  joinColumns = @JoinColumn(name = "hex_tile_id",
  referencedColumnName = "hex_tile_id"),
  inverseJoinColumns = @JoinColumn(name = "hex_node_edge_id",
  referencedColumnName = "hex_node_edge_id"))
    @JsonProperty("secret_edges")
    private List<AVALONHexNodeEdgeEntity>    secretEdges;
    /**
     * Gets the list of secretEdges.
     * @return {@link List}<{@link AVALONHexNodeEdgeEntity}>
     */
    public List<AVALONHexNodeEdgeEntity> getSecretEdges() {
        return secretEdges;
    }
    /**
     * Sets the list of secretEdges.
     * @param val the new value
     */
    public void setSecretEdges(final List<AVALONHexNodeEdgeEntity> val) {
        secretEdges = val;
    }

    /**
     * the list of {@link AVALONHexNodeEntity}s associated with this
     * {@link AVALONHexTileEntity}.
     */
    @OneToMany(targetEntity = AVALONHexNodeEntity.class,
      fetch = FetchType.EAGER)
    @Fetch(FetchMode.SELECT)
    @JoinTable(name = "hex_tile_enchanted_terrain_lookup", schema = "avalon",
  joinColumns = @JoinColumn(name = "hex_tile_id",
  referencedColumnName = "hex_tile_id"),
  inverseJoinColumns = @JoinColumn(name = "hex_node_id",
  referencedColumnName = "hex_node_id"))
    @JsonProperty("enchanted_terrain")
    private List<AVALONHexNodeEntity>    enchantedTerrain;
    /**
     * Gets the list of enchantedTerrains.
     * @return {@link List}<{@link AVALONHexNodeEntity}>
     */
    public List<AVALONHexNodeEntity> getEnchantedTerrain() {
        return enchantedTerrain;
    }
    /**
     * Sets the list of enchantedTerrains.
     * @param val the new value
     */
    public void setEnchantedTerrain(final List<AVALONHexNodeEntity> val) {
        enchantedTerrain = val;
    }

    /**
     * the list of {@link AVALONHexSideEdgeEntity}s associated with this
     * {@link AVALONHexTileEntity}.
     */
    @OneToMany(targetEntity = AVALONHexSideEdgeEntity.class,
      fetch = FetchType.EAGER)
    @Fetch(FetchMode.SELECT)
    @JoinTable(name = "hex_tile_enchanted_side_edges_lookup", schema = "avalon",
  joinColumns = @JoinColumn(name = "hex_tile_id",
  referencedColumnName = "hex_tile_id"),
  inverseJoinColumns = @JoinColumn(name = "hex_side_edge_id",
  referencedColumnName = "hex_side_edge_id"))
    @JsonProperty("enchanted_side_edges")
    private List<AVALONHexSideEdgeEntity>    enchantedSideEdges;
    /**
     * Gets the list of enchantedSideEdges.
     * @return {@link List}<{@link AVALONHexSideEdgeEntity}>
     */
    public List<AVALONHexSideEdgeEntity> getEnchantedSideEdges() {
        return enchantedSideEdges;
    }
    /**
     * Sets the list of enchantedSideEdges.
     * @param val the new value
     */
    public void setEnchantedSideEdges(final List<AVALONHexSideEdgeEntity> val) {
        enchantedSideEdges = val;
    }

    /**
     * the list of {@link AVALONHexNodeEdgeEntity}s associated with this
     * {@link AVALONHexTileEntity}.
     */
    @OneToMany(targetEntity = AVALONHexNodeEdgeEntity.class,
      fetch = FetchType.EAGER)
    @Fetch(FetchMode.SELECT)
    @JoinTable(name = "hex_tile_enchanted_secret_edges_lookup", schema = "avalon",
  joinColumns = @JoinColumn(name = "hex_tile_id",
  referencedColumnName = "hex_tile_id"),
  inverseJoinColumns = @JoinColumn(name = "hex_node_edge_id",
  referencedColumnName = "hex_node_edge_id"))
    @JsonProperty("enchanted_secret_edges")
    private List<AVALONHexNodeEdgeEntity>    enchantedSecretEdges;
    /**
     * Gets the list of enchantedSecretEdges.
     * @return {@link List}<{@link AVALONHexNodeEdgeEntity}>
     */
    public List<AVALONHexNodeEdgeEntity> getEnchantedSecretEdges() {
        return enchantedSecretEdges;
    }
    /**
     * Sets the list of enchantedSecretEdges.
     * @param val the new value
     */
    public void setEnchantedSecretEdges(final List<AVALONHexNodeEdgeEntity> val) {
        enchantedSecretEdges = val;
    }

    /**
     * the list of {@link AVALONHexNodeEdgeEntity}s associated with this
     * {@link AVALONHexTileEntity}.
     */
    @OneToMany(targetEntity = AVALONHexNodeEdgeEntity.class,
      fetch = FetchType.EAGER)
    @Fetch(FetchMode.SELECT)
    @JoinTable(name = "hex_tile_enchanted_edges_lookup", schema = "avalon",
  joinColumns = @JoinColumn(name = "hex_tile_id",
  referencedColumnName = "hex_tile_id"),
  inverseJoinColumns = @JoinColumn(name = "hex_node_edge_id",
  referencedColumnName = "hex_node_edge_id"))
    @JsonProperty("enchanted_edges")
    private List<AVALONHexNodeEdgeEntity>    enchantedEdges;
    /**
     * Gets the list of enchantedEdges.
     * @return {@link List}<{@link AVALONHexNodeEdgeEntity}>
     */
    public List<AVALONHexNodeEdgeEntity> getEnchantedEdges() {
        return enchantedEdges;
    }
    /**
     * Sets the list of enchantedEdges.
     * @param val the new value
     */
    public void setEnchantedEdges(final List<AVALONHexNodeEdgeEntity> val) {
        enchantedEdges = val;
    }

    /**
     * the list of {@link AVALONHexNodeEdgeEntity}s associated with this
     * {@link AVALONHexTileEntity}.
     */
    @OneToMany(targetEntity = AVALONHexNodeEdgeEntity.class,
      fetch = FetchType.EAGER)
    @Fetch(FetchMode.SELECT)
    @JoinTable(name = "hex_tile_edges_lookup", schema = "avalon",
  joinColumns = @JoinColumn(name = "hex_tile_id",
  referencedColumnName = "hex_tile_id"),
  inverseJoinColumns = @JoinColumn(name = "hex_node_edge_id",
  referencedColumnName = "hex_node_edge_id"))
    @JsonProperty("edges")
    private List<AVALONHexNodeEdgeEntity>    edges;
    /**
     * Gets the list of edges.
     * @return {@link List}<{@link AVALONHexNodeEdgeEntity}>
     */
    public List<AVALONHexNodeEdgeEntity> getEdges() {
        return edges;
    }
    /**
     * Sets the list of edges.
     * @param val the new value
     */
    public void setEdges(final List<AVALONHexNodeEdgeEntity> val) {
        edges = val;
    }

    /**
     * the list of {@link AVALONHexClearingEntity}s associated with this
     * {@link AVALONHexTileEntity}.
     */
    @OneToMany(targetEntity = AVALONHexClearingEntity.class,
      fetch = FetchType.EAGER)
    @Fetch(FetchMode.SELECT)
    @JoinTable(name = "hex_tile_clearings_lookup", schema = "avalon",
  joinColumns = @JoinColumn(name = "hex_tile_id",
  referencedColumnName = "hex_tile_id"),
  inverseJoinColumns = @JoinColumn(name = "hex_clearing_id",
  referencedColumnName = "hex_clearing_id"))
    @JsonProperty("clearings")
    private List<AVALONHexClearingEntity>    clearings;
    /**
     * Gets the list of clearingss.
     * @return {@link List}<{@link AVALONHexClearingEntity}>
     */
    public List<AVALONHexClearingEntity> getClearings() {
        return clearings;
    }
    /**
     * Sets the list of clearingss.
     * @param val the new value
     */
    public void setClearings(final List<AVALONHexClearingEntity> val) {
        clearings = val;
    }

}

