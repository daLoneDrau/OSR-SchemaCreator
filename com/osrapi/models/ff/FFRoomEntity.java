package com.osrapi.models.ff;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToOne;
import javax.persistence.MapKeyColumn;
import javax.persistence.MapKeyJoinColumn;
import javax.persistence.MappedSuperclass;
import javax.persistence.OneToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * @author drau
 */
@JsonInclude(JsonInclude.Include.NON_EMPTY)
@Entity
@Table(name = "room", schema = "ff")
public final class FFRoomEntity {
    /**
     * the primary key - an autogenerated id (unique for each user in the db).
     */
    @Id
    @Column(name = "room_id")
    @GeneratedValue(strategy = GenerationType.SEQUENCE,
  generator = "room_seq")
    @SequenceGenerator(
        name = "room_seq",
        sequenceName = "ff.room_id_seq",
        allocationSize = 1
    )
    private Long                    id;
    /** Creates a new instance of {@link FFRoomEntity}. */
    public FFRoomEntity() {
        super();
    }
    /**
     * Gets the id.
     * @return {@link Long}
     */
    public Long getId() {
        return id;
    }
    /**
     * Sets the id.
     * @param val the new value
     */
    public void setId(final Long val) {
        id = val;
    }

    /** the text. */
    @ManyToOne(targetEntity = FFTextEntity.class, fetch = FetchType.EAGER)
    @Fetch(FetchMode.SELECT)
    @JoinColumn(name = "text")
    @JsonProperty("text")
  @NotNull
    private FFTextEntity    text;
    /**
     * Gets the text.
     * @return {@link FFTextEntity}
     */
    public FFTextEntity getText() {
        return text;
    }
    /**
     * Sets the text.
     * @param val the new value
     */
    public void setText(final FFTextEntity val) {
        text = val;
    }

    /** the code. */
    @Column(name = "code")
    @JsonProperty("code")
    @NotNull
    private String                    code;
    /**
     * Gets the code.
     * @return {@link String}
     */
    public String getCode() {
        return code;
    }
    /**
     * Sets the code.
     * @param val the new value
     */
    public void setCode(final String val) {
        code = val;
    }

    /**
     * the list of {@link FFDoorEntity}s associated with this
     * {@link FFRoomEntity}.
     */
    @OneToMany(targetEntity = FFDoorEntity.class,
      fetch = FetchType.EAGER)
    @Fetch(FetchMode.SELECT)
    @JoinTable(name = "room_doors_lookup", schema = "ff",
  joinColumns = @JoinColumn(name = "room_id",
  referencedColumnName = "room_id"),
  inverseJoinColumns = @JoinColumn(name = "door_id",
  referencedColumnName = "door_id"))
    @JsonProperty("doors")
    private List<FFDoorEntity>    doors;
    /**
     * Gets the list of doorss.
     * @return {@link List}<{@link FFDoorEntity}>
     */
    public List<FFDoorEntity> getDoors() {
        return doors;
    }
    /**
     * Sets the list of doorss.
     * @param val the new value
     */
    public void setDoors(final List<FFDoorEntity> val) {
        doors = val;
    }

    @ElementCollection
    @CollectionTable(name = "room_scripted_events_lookup",
  schema = "ff", joinColumns = @JoinColumn(name = "room_id"))
    @MapKeyColumn(name = "key")
    @Column(name = "value")
    @JsonProperty("scripted_events")
    private Map<String, String> scriptedEvents;
    /**
     * Gets the map of scriptedEventss.
     * @return {@link Map}<{@link String}, {@link String}>
     */
    public Map<String, String> getScriptedEvents() {
        return scriptedEvents;
    }
    /**
     * Sets the mapping for scriptedEventss.
     * @param val the new value
     */
    public void setScriptedEvents(Map<String, String> val) {
        scriptedEvents = val;
    }

    @ElementCollection
    @CollectionTable(name = "room_exits_lookup",
  schema = "ff", joinColumns = @JoinColumn(name = "room_id"))
    @MapKeyColumn(name = "key")
    @Column(name = "value")
    @JsonProperty("exits")
    private Map<String, String> exits;
    /**
     * Gets the map of exitss.
     * @return {@link Map}<{@link String}, {@link String}>
     */
    public Map<String, String> getExits() {
        return exits;
    }
    /**
     * Sets the mapping for exitss.
     * @param val the new value
     */
    public void setExits(Map<String, String> val) {
        exits = val;
    }

}

